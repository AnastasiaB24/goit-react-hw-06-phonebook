import { configureStore } from '@reduxjs/toolkit';
import reducer from './reducer';

const rootReducer = {
  contacts: reducer,
};

const store = configureStore({
  reducer: rootReducer,
});

export default store;

// Набір інструментів Redux включає такі API:

// configureStore(): обгортання, createStoreщоб забезпечити спрощені параметри конфігурації та хороші за замовчуванням Він може автоматично поєднувати ваші редуктори зрізів, додає будь-яке проміжне програмне забезпечення Redux, яке ви постачаєте, включає redux-thunkза замовчуванням та дозволяє використовувати розширення Redux DevTools.
// createReducer(): це дозволяє вам подавати таблицю пошуку типів дій для функцій редуктора регістрів, а не писати оператори перемикання. Крім того, він автоматично використовує immerбібліотеку, щоб дозволити вам писати простіші незмінні оновлення із звичайним мутативним кодом, наприклад state.todos[3].completed = true.
// createAction(): генерує функцію творця дії для даного рядка типу дії. Сама функція toString()визначена, щоб її можна було використовувати замість константи типу.
// createSlice(): приймає об'єкт функцій редуктора, ім'я зрізу та початкове значення стану і автоматично генерує зріз редуктора з відповідними творцями дій та типами дій.
// createAsyncThunk: приймає рядок типу дії та функцію, яка повертає обіцянку, та генерує обман, який відправляє pending/fulfilled/rejectedтипи дій на основі цієї обіцянки
// createEntityAdapter: генерує набір багаторазових редукторів та селекторів для управління нормалізованими даними в сховищі
// createSelectorУтиліта від Reselect бібліотеки, реекспортувати для простоти використання.
